#!/usr/bin/env python2
# -*- coding: utf-8 -*-
##################################################
# GNU Radio Python Flow Graph
# Title: Top Block
# Generated: Fri Jul 12 07:54:31 2019
##################################################

from gnuradio import blocks
from gnuradio import eng_notation
from gnuradio import gr
from gnuradio.eng_option import eng_option
from gnuradio.filter import firdes
from gnuradio.filter import pfb
from optparse import OptionParser
import grgsm
import math
import pmt
from argparse import ArgumentParser, ArgumentTypeError, RawDescriptionHelpFormatter
from grgsm import arfcn

EXTRA_HELP = ""#!/usr/bin/env python2
# -*- coding: utf-8 -*-
##################################################
# GNU Radio Python Flow Graph
# Title: Top Block
# Generated: Sat Jul 13 01:24:08 2019
##################################################

from gnuradio import blocks
from gnuradio import eng_notation
from gnuradio import gr
from gnuradio.eng_option import eng_option
from gnuradio.filter import firdes
from gnuradio.filter import pfb
from optparse import OptionParser
import grgsm
import math
import pmt
from argparse import ArgumentParser, ArgumentTypeError, RawDescriptionHelpFormatter
from grgsm import arfcn

EXTRA_HELP = ""

class top_block(gr.top_block):

    def __init__(self, b=23e6, f="/home/datqm/Desktop/Share_Folder/Share_Folder/test_613.cfile", fc=[1835e6], fn=0, hsn=20, ma=[615,708,710], maio=2, n="offsetCFile", osr=4, s=45.5e6, tseq=5, tslot=1, nstream=1, id_start=1, sample_start=0):
        gr.top_block.__init__(self, "Top Block")

        ##################################################
        # Parameters
        ##################################################
        self.b = b
        self.f = f
        self.fc = fc
        self.fn = fn
        self.hsn = hsn
        self.ma = ma
        self.maio = maio
        self.n = n
        self.osr = osr
        self.s = s
        self.tseq = tseq
        self.tslot = tslot
        self.nstream = nstream
        self.id_start = id_start
        self.sample_start = sample_start
	self.blocks_file_source = {}
        ##################################################
        # Variables
        ##################################################
        self.gsm_symb_rate = gsm_symb_rate = 1625000.0/6.0
        self.samp_rate_out = samp_rate_out = gsm_symb_rate*osr
	file = f.split(",")
        ##################################################
        # Blocks
        ##################################################
        self.pfb_decimator_ccf_0 = pfb.decimator_ccf(
        	  int(s/samp_rate_out),
        	  (firdes.low_pass(1, s, 125.0e3, 5.0e3,firdes.WIN_HAMMING,6.76)),
        	  0,
        	  100,
                  True,
                  True)
        self.pfb_decimator_ccf_0.declare_sample_delay(0)
        	
        self.gsm_super_block_0 = grgsm.super_block(osr, (ma), (fc), maio, hsn, fn, 0, 23e6, tseq, s, n, id_start, sample_start, False)
        self.gsm_sdcch8_demapper_0 = grgsm.gsm_sdcch8_demapper(
            timeslot_nr=tslot,
        )
        self.gsm_message_printer_0 = grgsm.message_printer(pmt.intern(""), False,
            False, False)
        self.gsm_hopping_frequency_0 = grgsm.hopping_frequency((ma), (fc), maio, hsn, fn, b, s, n, id_start, sample_start, False)
        self.gsm_control_channels_decoder_0 = grgsm.control_channels_decoder()
        self.blocks_socket_pdu_0_1 = blocks.socket_pdu("UDP_CLIENT", "127.0.0.1", "4729", 1500, False)
        self.blocks_socket_pdu_0_0 = blocks.socket_pdu("UDP_SERVER", "127.0.0.1", "4729", 10000, False)
        self.blocks_null_sink_0 = blocks.null_sink(gr.sizeof_gr_complex*1)
	for i in range(0, nstream):
            self.blocks_file_source[i] = blocks.file_source(gr.sizeof_gr_complex*1, file[i], False)
	    self.connect((self.blocks_file_source[i], 0), (self.gsm_hopping_frequency_0, i))

        ##################################################
        # Connections
        ##################################################
        self.msg_connect((self.gsm_control_channels_decoder_0, 'msgs'), (self.blocks_socket_pdu_0_1, 'pdus'))    
        self.msg_connect((self.gsm_control_channels_decoder_0, 'msgs'), (self.gsm_message_printer_0, 'msgs'))    
        self.msg_connect((self.gsm_sdcch8_demapper_0, 'bursts'), (self.gsm_control_channels_decoder_0, 'bursts'))    
        self.msg_connect((self.gsm_super_block_0, 'CX'), (self.gsm_sdcch8_demapper_0, 'bursts'))    
        self.connect((self.gsm_hopping_frequency_0, 0), (self.pfb_decimator_ccf_0, 0))    
        self.connect((self.gsm_super_block_0, 0), (self.blocks_null_sink_0, 0))    
        self.connect((self.pfb_decimator_ccf_0, 0), (self.gsm_super_block_0, 0))    

    def get_b(self):
        return self.b

    def set_b(self, b):
        self.b = b

    def get_f(self):
        return self.f

    def set_f(self, f):
        self.f = f
        self.blocks_file_source_0.open(self.f, False)

    def get_fc(self):
        return self.fc

    def set_fc(self, fc):
        self.fc = fc

    def get_fn(self):
        return self.fn

    def set_fn(self, fn):
        self.fn = fn

    def get_hsn(self):
        return self.hsn

    def set_hsn(self, hsn):
        self.hsn = hsn

    def get_ma(self):
        return self.ma

    def set_ma(self, ma):
        self.ma = ma

    def get_maio(self):
        return self.maio

    def set_maio(self, maio):
        self.maio = maio

    def get_n(self):
        return self.n

    def set_n(self, n):
        self.n = n

    def get_osr(self):
        return self.osr

    def set_osr(self, osr):
        self.osr = osr
        self.set_samp_rate_out(self.gsm_symb_rate*self.osr)

    def get_s(self):
        return self.s

    def set_s(self, s):
        self.s = s
        self.pfb_decimator_ccf_0.set_taps((firdes.low_pass(1, self.s, 125.0e3, 5.0e3,firdes.WIN_HAMMING,6.76)))

    def get_tseq(self):
        return self.tseq

    def set_tseq(self, tseq):
        self.tseq = tseq

    def get_tslot(self):
        return self.tslot

    def set_tslot(self, tslot):
        self.tslot = tslot
        self.gsm_sdcch8_demapper_0.set_timeslot_nr(self.tslot)

    def get_nstream(self):
        return self.nstream

    def set_nstream(self, nstream):
        self.nstream = nstream

    def get_id_start(self):
        return self.id_start

    def set_id_start(self, id_start):
        self.id_start = id_start

    def get_sample_start(self):
        return self.sample_start

    def set_sample_start(self, sample_start):
        self.sample_start = sample_start

    def get_gsm_symb_rate(self):
        return self.gsm_symb_rate

    def set_gsm_symb_rate(self, gsm_symb_rate):
        self.gsm_symb_rate = gsm_symb_rate
        self.set_samp_rate_out(self.gsm_symb_rate*self.osr)

    def get_samp_rate_out(self):
        return self.samp_rate_out

    def set_samp_rate_out(self, samp_rate_out):
        self.samp_rate_out = samp_rate_out

def main(top_block_cls=top_block, options=None):
    parser = ArgumentParser(formatter_class=RawDescriptionHelpFormatter, description='Hopping frequency', add_help=True, epilog=EXTRA_HELP)
    parser.add_argument(
        "--fn", dest="fn", type=int, default=0,
        help="Set frame number")
    parser.add_argument(
        "--maio", dest="maio", type=int, default=0,
        help="Set MAIO")
    parser.add_argument(
        "--tseq", dest="tseq", type=int, default=2,
        help="Set Training Sequence")
    parser.add_argument(
        "--tslot", dest="tslot", type=int, default=2,
        help="Set time slot")
    parser.add_argument(
        "--hsn", dest="hsn", type=int,
        help="Set HSN")
    parser.add_argument(
        "--osr", dest="osr", type=int, default=4,
        help="Set over sample ratio")
    parser.add_argument(
        "--nstream", dest="nstream", type=int, default=2,
        help="Set number stream")
    parser.add_argument(
        "--b", dest="b", type=float,
        help="Set band width")
    parser.add_argument(
        "--s", dest="s", type=float,
        help="Set sample rate")
    parser.add_argument(
        "--ma", dest="ma", type=int, nargs='+',
        help="Set ma list")
    parser.add_argument(
        "--fc", dest="fc", type=float, nargs='+',
        help="Set frequency center list")
    parser.add_argument(
        "--f", dest="f", type=str,
        help="Set file name")
    parser.add_argument(
        "--n", dest="n", type=str,
        help="Set database name")
    parser.add_argument(
        "--id_start", dest="id_start", type=int, default=1,
        help="Set id start")
    parser.add_argument(
        "--sample_start", dest="sample_start", type=int, default=0,
        help="Set sample start")
    options = parser.parse_args()

    tb = top_block_cls(b=options.b, f=options.f, fc=options.fc, fn=options.fn, hsn=options.hsn, ma=options.ma, maio=options.maio, n=options.n, osr=options.osr, s=options.s, tseq=options.tseq, tslot=options.tslot, nstream=options.nstream, id_start=options.id_start, sample_start=options.sample_start)
    tb.start()
    try:
        raw_input('Press Enter to quit: ')
    except EOFError:
        pass
    tb.stop()
    tb.wait()


if __name__ == '__main__':
    main()
